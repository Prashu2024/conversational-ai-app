from pydantic import BaseModel, Field
from typing import List, Dict, Optional

class ChatMessage(BaseModel):
    """Represents a single message in the conversation history."""
    role: str = Field(..., description="Role of the message sender ('user' or 'assistant')")
    content: str = Field(..., description="The text content of the message")

class ChatRequest(BaseModel):
    """Request model for the /chat and /chat_stream endpoints."""
    history: List[ChatMessage] = Field(..., description="The entire conversation history, including the latest user message.")
    # Optional: Add parameters like temperature, max_tokens if you want client to control them
    # temperature: Optional[float] = None
    # max_tokens: Optional[int] = None

class ChatResponse(BaseModel):
    """Response model for the standard /chat endpoint."""
    role: str = "assistant"
    content: str = Field(..., description="The complete response generated by the assistant.")

# No specific response model is needed for the streaming endpoint,
# as it returns a stream of text chunks directly.

class HealthCheckResponse(BaseModel):
    """Response model for the health check endpoint."""
    status: str = "OK"
    llm_provider: str = Field(..., description="The currently configured LLM provider.")
    llm_client_initialized: bool = Field(..., description="Indicates if the LLM client was successfully initialized.")

